@{
    Layout = "~/Areas/Admin/Views/Shared/Layout/_AuthLayout.cshtml";
}
@using Hrmanagement.Core.DTO.DtoOutput
@{
    var resetId = ViewData["resetPassword"] as ResetPasswordOutput;
}

<div class="limiter">
    <div class="container-login100" style="background-image: url('../images/img-01.jpg');">
        <div class="wrap-login100 p-t-50 p-b-0">
            <form class="login100-form validate-form" method="post" action="~/Admin/Auth/resetPassWordUpdate" id="changepasswordForm" onsubmit="return resetPassword()">
                @if (resetId == null)
                {
                }
                else
                {
                    <input type="hidden" asp-for="Token" name="Token" value="@resetId.Token" />
                    <input type="hidden" asp-for="ToEmail" name="ToEmail" value="@resetId.ToEmail" />
                }

                <div class="wrap-input100 validate-input m-b-10" data-validate="Password is required">
                    <input class="input100" type="password" id="newpassword" name="Newpassword" placeholder="New Password" autocomplete="new-password" required>
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa fa-lock"></i>
                    </span>
                </div>

                <div class="wrap-input100 validate-input m-b-10" data-validate="Password is required">
                    <input class="input100" type="password" id="confirmpassword" name="Confirmpassword" placeholder="Confirm Password" autocomplete="new-password" required>
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa fa-lock"></i>
                    </span>
                </div>

                <div class="container-login100-form-btn p-t-10">
                    <button type="button" class="btn btn-info pull-right" id="saveButton">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.3.0/crypto-js.js"></script>
<script>
    function hashPassword(password) {
        return CryptoJS.MD5(password).toString();
    }

    document.getElementById('saveButton').addEventListener('click', function () {
        var newpasswordInput = document.getElementById('newpassword');
        var confirmpasswordInput = document.getElementById('confirmpassword');

        var newPassword = newpasswordInput.value;
        var confirmpassword = confirmpasswordInput.value;
        if (newPassword == '') {
            toastr.error("NewPassword field is required.");
            return;
        }
        else if (newPassword.length < 6 || newPassword.length > 30) {
            toastr.error("NewPassword length should be between minlength 6 and maxlength 30");
            return false;
        }
        else if (confirmpassword == '') {
            toastr.error("Confirmpassword field is required.");
            return;
        }
        else if (confirmpassword.length < 6 || confirmpassword.length > 30) {
            toastr.error("Confirmpassword length should be between minlength 6 and maxlength 30");
            return false;
        }
        else if (newPassword != confirmpassword) {
            toastr.error("Your NewPassword and ConfirmPassword is not matched");
            return false;
        }
        var hashednewPassword = hashPassword(newPassword);
        var hashedconfirmpassword = hashPassword(confirmpassword);
        newpasswordInput.value = hashednewPassword;
        confirmpasswordInput.value = hashedconfirmpassword;
        document.getElementById('changepasswordForm').submit();

    });
</script>
@await Component.InvokeAsync("Toaster")